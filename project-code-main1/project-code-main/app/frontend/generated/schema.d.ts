/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/club/": {
    get: operations["getClubByID_api_club__get"];
  };
  "/api/clubname/": {
    get: operations["getClubnameByID_api_clubname__get"];
  };
  "/api/clubs/": {
    get: operations["getClubsByLeagueID_api_clubs__get"];
  };
  "/api/countries": {
    /** @description Retrieves list of countries */
    get: operations["get_countries_api_countries_get"];
  };
  "/api/countries/": {
    get: operations["getCountries_api_countries__get"];
  };
  "/api/database": {
    /** @description Repopulates the stadiums database with updated information. */
    get: operations["populate_database_api_database_get"];
  };
  "/api/fullPlayerPredictiveLeague/{name}": {
    /**
     * Given a player name, uses a combination of previous methods to find 100 players that played in the same league
     * @description that share the same nationality as the player, and then find where they played next.</br>Returns the top 5 leagues with the most players.</br>Returns an error message according to lack of information depending on ID, League, Nation or Probability
     */
    get: operations["predictnextLeagues_api_fullPlayerPredictiveLeague__string_name__get"];
  };
  "/api/getPlayerInfo/{name}": {
    /**
     * Given a player ID, returns the player's birthday, height and weight given they exists in WikiData.
     * @description Returns an error message if the playerID does not exist.
     */
    get: operations["get_PlayerInfo_api_getPlayerInfo__string_name__get"];
  };
  "/api/getTournaments/{name}": {
    /**
     * Given a player name, returns for each tournament they have participated in:
     * @description     Tournament Name - string</br>    Tournament Date - string</br>Returns an error message if the playerID does not exist
     */
    get: operations["get_Tournaments_api_getTournaments__string_name__get"];
  };
  "/api/leagues": {
    /** @description Retrieves list of leagues */
    get: operations["get_leagues_api_leagues_get"];
  };
  "/api/leagues/": {
    get: operations["getLeaguesByCountryID_api_leagues__get"];
  };
  "/api/logging": {
    post: operations["log_message_api_logging_post"];
  };
  "/api/newsArticles/{id}": {
    /**
     * Given a player ID, returns for each of the top 5 news articles about them:
     * @description     Article Name - string</br>    Article link - string</br>Returns an error message if the playerID does not exist
     */
    get: operations["get_newsArticles_api_newsArticles__string_id__get"];
  };
  "/api/node_data/": {
    get: operations["getPlayersByTeamID_api_node_data__get"];
  };
  "/api/node_player/": {
    get: operations["getPlayerByID_api_node_player__get"];
  };
  "/api/player/extra/{player_id}": {
    /**
     * Retrieve a player by player Q-number.
     * @description Get additinal data for a player using their QID (e.g. Q50602 for a specific player)
     */
    get: operations["get_player_extra_by_ID_api_player_extra__string_player_id__get"];
  };
  "/api/player/name/{name}": {
    /**
     * Retrieve players by Name.
     * @description Get players by name (e.g. Messi for all players named Messi)
     */
    get: operations["get_players_by_Name_api_player_name__string_name__get"];
  };
  "/api/player/": {
    get: operations["getPlayerByID_api_player__get"];
  };
  "/api/playerData/{name}": {
    /**
     * Returns a player's WikiData ID given the player's name, if it is found in the database.
     * @description If it is not found, returns an error response
     */
    get: operations["get_player_Id_api_playerData__string_name__get"];
  };
  "/api/stadiums": {
    /** @description Retrieves list of stadiums with optional filtering */
    get: operations["get_stadiums_api_stadiums_get"];
    /** @description Inserts given data in to the database */
    post: operations["insert_stadiums_api_stadiums_post"];
  };
  "/api/teamData/{id}": {
    /**
     * Given a player ID, returns for each team they've played for:
     * @description     Team Name - string</br>    Start Date - string</br>    End Date (if it exists) - string</br>    Stadium Name (if it exists) - string</br>    Stadium Coordinates (if it exists) - list of floats</br>    Goals for team (if it exists) - string</br>    Appearances for team (if it exists) - string</br>Returns an error message if the playerID does not exist
     */
    get: operations["get_Team_api_teamData__string_id__get"];
  };
  "/api/teams": {
    /**
     * Returns a list of all teams and their Q-numbers.
     * @description Get all teams in the Premier League (Q9448) and their Q-numbers
     */
    get: operations["get_premier_league_teams_api_teams_get"];
  };
  "/api/teams_with_players/{team_id}": {
    /**
     * Retrieve the team with the given ID, along with its players.
     * @description Get all teams in the Premier League (Q9448) and their Q-numbers
     */
    get: operations["get_teams_with_players_by_id_api_teams_with_players__string_team_id__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Coordinates */
    Coordinates: {
      /** Lat */
      lat: number;
      /** Lng */
      lng: number;
    };
    /** ErrorLog */
    ErrorLog: {
      /** Component Stack */
      component_stack: string;
      /** Error */
      error: string;
    };
    /** ErrorResponse */
    ErrorResponse: {
      /** Error */
      error: string;
    };
    /**
     * PlayerResponse
     * @description Represents a Player ID response
     * player_id (str) - id of player
     */
    PlayerResponse: {
      /** Player Id */
      player_id: string;
    };
    /** Stadium */
    Stadium: {
      /** Capacity */
      capacity: number;
      coordinates: components["schemas"]["Coordinates"];
      /** Country */
      country: string;
      /** Image Url */
      image_url: string;
      /** League Id */
      league_id: string;
      /** Location Desc */
      location_desc: string;
      /** Name */
      name: string;
      /** Team */
      team: string;
      /** Team Id */
      team_id: string;
      /** Year */
      year: number;
    };
    /** StadiumForm */
    StadiumForm: {
      /** Capacity */
      capacity: number;
      coordinates: components["schemas"]["Coordinates"];
      /** League */
      league: string;
      /** Stadium-Name */
      "stadium-name": string;
      /** Team-Name */
      "team-name": string;
      /** Year */
      year: number;
    };
    /** StadiumFormResponse */
    StadiumFormResponse: {
      /** Stadium Id */
      stadium_id: number;
    };
    /** Stadiums */
    Stadiums: {
      /** Stadiums */
      stadiums: components["schemas"]["Stadium"][];
    };
    /** ValidationErrorModel */
    ValidationErrorModel: {
      /**
       * Error context
       * @description an optional object which contains values required to render the error message.
       */
      ctx?: Record<string, never>;
      /**
       * Location
       * @description the error's location as a list.
       */
      loc?: string[];
      /**
       * Message
       * @description a computer-readable identifier of the error type.
       */
      msg?: string;
      /**
       * Error Type
       * @description a human readable explanation of the error.
       */
      type_?: string;
    };
    /** teamTemp */
    teamTemp: {
      /** Teamtemp */
      teamTemp: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  getClubByID_api_club__get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["teamTemp"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  getClubnameByID_api_clubname__get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["teamTemp"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  getClubsByLeagueID_api_clubs__get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["teamTemp"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /** @description Retrieves list of countries */
  get_countries_api_countries_get: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Countries"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  getCountries_api_countries__get: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  log_message_api_logging_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorLog"];
      };
    };
    responses: {
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /** @description Repopulates the stadiums database with updated information. */
  populate_database_api_database_get: {
    responses: {
    };
  };
  /**
   * Given a player name, uses a combination of previous methods to find 100 players that played in the same league
   * @description that share the same nationality as the player, and then find where they played next.</br>Returns the top 5 leagues with the most players.</br>Returns an error message according to lack of information depending on ID, League, Nation or Probability
   */
  predictnextLeagues_api_fullPlayerPredictiveLeague__string_name__get: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Given a player ID, returns the player's birthday, height and weight given they exists in WikiData.
   * @description Returns an error message if the playerID does not exist.
   */
  get_PlayerInfo_api_getPlayerInfo__string_name__get: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Given a player name, returns for each tournament they have participated in:
   * @description     Tournament Name - string</br>    Tournament Date - string</br>Returns an error message if the playerID does not exist
   */
  get_Tournaments_api_getTournaments__string_name__get: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /** @description Retrieves list of leagues */
  get_leagues_api_leagues_get: {
    parameters: {
      query?: {
        /** @description List of countries to display */
        countries?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Leagues"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  getLeaguesByCountryID_api_leagues__get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["teamTemp"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  log_message_api_logging_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorLog"];
      };
    };
    responses: {
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Given a player ID, returns for each of the top 5 news articles about them:
   * @description     Article Name - string</br>    Article link - string</br>Returns an error message if the playerID does not exist
   */
  get_newsArticles_api_newsArticles__string_id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  getPlayersByTeamID_api_node_data__get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["teamTemp"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  getPlayerByID_api_node_player__get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["teamTemp"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Retrieve a player by player Q-number.
   * @description Get additinal data for a player using their QID (e.g. Q50602 for a specific player)
   */
  get_player_extra_by_ID_api_player_extra__string_player_id__get: {
    parameters: {
      path: {
        player_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerGroup33_extra"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Retrieve players by Name.
   * @description Get players by name (e.g. Messi for all players named Messi)
   */
  get_players_by_Name_api_player_name__string_name__get: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayersResponseGroup33"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Retrieve a player by player Q-number.
   * @description Get a player by player Q-number (e.g. Q50602 for a specific player)
   */
  get_player_by_ID_api_player__string_player_id__get: {
    parameters: {
      path: {
        player_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerGroup33"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Returns a player's WikiData ID given the player's name, if it is found in the database.
   * @description If it is not found, returns an error response
   */
  get_player_Id_api_playerData__string_name__get: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Retrieve all players from a team by team Q-number and their Q-numbers.
   * @description Get all players from a team by team Q-number (e.g. Q9439 for Arsenal F.C.) and their Q-numbers
   */
  get_team_players_api_players__string_team_id__get: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayersResponseGroup33"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /** @description Retrieves list of stadiums with optional filtering */
  get_stadiums_api_stadiums_get: {
    parameters: {
      query?: {
        "min-capacity"?: number;
        "max-capacity"?: number;
        /** @description List of countries to display */
        countries?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Stadiums"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /** @description Inserts given data in to the database */
  insert_stadiums_api_stadiums_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StadiumForm"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StadiumFormResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Given a player ID, returns for each team they've played for:
   * @description     Team Name - string</br>    Start Date - string</br>    End Date (if it exists) - string</br>    Stadium Name (if it exists) - string</br>    Stadium Coordinates (if it exists) - list of floats</br>    Goals for team (if it exists) - string</br>    Appearances for team (if it exists) - string</br>Returns an error message if the playerID does not exist
   */
  get_Team_api_teamData__string_id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlayerResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
  /**
   * Returns a list of all teams and their Q-numbers.
   * @description Get all teams in the Premier League (Q9448) and their Q-numbers
   */
  get_premier_league_teams_api_teams_get: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamsResponseGroup33"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Retrieve the team with the given ID, along with its players.
   * @description Get all teams in the Premier League (Q9448) and their Q-numbers
   */
  get_teams_with_players_by_id_api_teams_with_players__string_team_id__get: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TeamWithPlayersResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable Entity */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationErrorModel"][];
        };
      };
    };
  };
}
